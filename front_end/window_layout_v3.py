# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.ticker import MultipleLocator
from connect_plc import *
from PyQt5.QtCore import QTimer

class MatplotlibWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)

        # 创建 Matplotlib Figure 和 Canvas
        self.figure = plt.figure(figsize=(19.2, 4.8), dpi=100)
        self.canvas = FigureCanvas(self.figure)

        # 布局设置
        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(self.canvas)

        self.ax=self.figure.add_subplot(1,1,1)

        #ax.set_xlabel('Time') 
        #ax.set_title('plc signal')
    
        plt.grid(True) #添加网格
        #plt.ion()  #interactive mode on
        plt.ioff() # 禁用交互模式
        #plt.axis('off')
        #plt.tick_params(axis='x', which='major',pad=20, width=1)
        plt.gca().xaxis.set_major_locator(MultipleLocator(30))

        for tick in plt.gca().xaxis.get_major_ticks():
            tick.label1.set_rotation(90)


        self.line_4 = None
        self.line_5 = None
        self.line_6 = None
        self.line_7 = None


        self.obsX = []
        self.M4 = []
        self.M5 = []
        self.M6 = []
        self.M7 = []
        self.t0 = int(time.time() * 1000)
        
        # 定时器设置
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.plot2)
        self.timer.start(50)  # 每100毫秒更新一次

        # 绘制图形
        # self.plot()
        #self.plot2()
        

    def plot(self):
        x = np.linspace(0, 10, 100)
        y = np.sin(x)

        self.figure.clear()
        ax = self.figure.add_subplot(111)
        ax.plot(x, y)
        ax.set_title('Sine Wave')
        ax.set_xlabel('X-axis')
        ax.set_ylabel('Y-axis')

        self.canvas.draw()

    def plot2(self):
        
        #666.4  666.5锯前 4正 5反 666.6 666.7锯后 6 正 7反
        r4 = siemens.ReadBool("M666.4")
        r5 = siemens.ReadBool("M666.5")
        r6 = siemens.ReadBool("M666.6")
        r7 = siemens.ReadBool("M666.7")
        
        #state = "M666.4 {} M666.5 {} M666.6 {} M666.7 {}".format(int(r4.Content), int(r5.Content), int(r6.Content), int(r7.Content))
        
        #logger.info(state)

        t = (int(time.time() * 1000) - self.t0)//10
        
        if t > 6000:
            self.t0 = t

        self.ax.set_xlim([t-1900,t+100])
        self.ax.set_ylim([0.0,1.1])
        
        self.obsX.append(t)
        self.M4.append(int(r4.Content))
        self.M5.append(int(r5.Content))
        self.M6.append(int(r6.Content))
        self.M7.append(int(r7.Content))

        if len(self.obsX) > 500:
            self.obsX = self.obsX[-200:]
            self.M4 = self.M4[-200:]
            self.M5 = self.M5[-200:]
            self.M6 = self.M6[-200:]
            self.M7 = self.M7[-200:]
            
        if self.line_4 is None:
            self.line_4 = self.ax.plot(self.obsX, self.M4,color='green',label='M4')[0]
            self.line_5 = self.ax.plot(self.obsX, self.M5,color='red',label='M5')[0]
            self.line_6 = self.ax.plot(self.obsX, self.M6,color='c',label='M6')[0]
            self.line_7 = self.ax.plot(self.obsX, self.M7,color='b',label='M7')[0]

        self.line_4.set_xdata(self.obsX)
        self.line_4.set_ydata(self.M4)
        self.line_5.set_xdata(self.obsX)
        self.line_5.set_ydata(self.M5)
        self.line_6.set_xdata(self.obsX)
        self.line_6.set_ydata(self.M6)
        self.line_7.set_xdata(self.obsX)
        self.line_7.set_ydata(self.M7)

        self.ax.legend()
        self.canvas.draw()
           
           





class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.setEnabled(True)
        mainWindow.resize(1920, 1080)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(mainWindow.sizePolicy().hasHeightForWidth())
        mainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(1740, 520, 101, 161))
        self.groupBox.setObjectName("groupBox")
        self.forwardButton = QtWidgets.QRadioButton(self.groupBox)
        self.forwardButton.setGeometry(QtCore.QRect(10, 40, 100, 20))
        self.forwardButton.setChecked(False)
        self.forwardButton.setObjectName("forwardButton")
        self.backwardButton = QtWidgets.QRadioButton(self.groupBox)
        self.backwardButton.setGeometry(QtCore.QRect(10, 130, 100, 20))
        self.backwardButton.setChecked(False)
        self.backwardButton.setObjectName("backwardButton")
        self.stopButton = QtWidgets.QRadioButton(self.groupBox)
        self.stopButton.setGeometry(QtCore.QRect(10, 80, 100, 20))
        self.stopButton.setChecked(False)
        self.stopButton.setObjectName("stopButton")
        self.date = QtWidgets.QLabel(self.centralwidget)
        self.date.setGeometry(QtCore.QRect(1700, 60, 201, 31))
        self.date.setObjectName("date")
        self.head_ori = QtWidgets.QLabel(self.centralwidget)
        self.head_ori.setGeometry(QtCore.QRect(880, 70, 781, 431))
        self.head_ori.setBaseSize(QtCore.QSize(640, 360))
        self.head_ori.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.head_ori.setObjectName("head_ori")
        self.tail_ori = QtWidgets.QLabel(self.centralwidget)
        self.tail_ori.setGeometry(QtCore.QRect(30, 70, 811, 431))
        self.tail_ori.setBaseSize(QtCore.QSize(640, 360))
        self.tail_ori.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tail_ori.setObjectName("tail_ori")
        self.enablesystemBox = QtWidgets.QCheckBox(self.centralwidget)
        self.enablesystemBox.setGeometry(QtCore.QRect(1730, 290, 121, 20))
        self.enablesystemBox.setObjectName("enablesystemBox")
        self.enablemanulBox = QtWidgets.QCheckBox(self.centralwidget)
        self.enablemanulBox.setGeometry(QtCore.QRect(1730, 480, 121, 20))
        self.enablemanulBox.setChecked(True)
        self.enablemanulBox.setObjectName("enablemanulBox")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(1700, 140, 101, 16))
        self.label.setObjectName("label")
        self.adjust_cnt = QtWidgets.QLabel(self.centralwidget)
        self.adjust_cnt.setGeometry(QtCore.QRect(1810, 140, 60, 16))
        self.adjust_cnt.setObjectName("adjust_cnt")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(1700, 190, 101, 16))
        self.label_2.setObjectName("label_2")
        self.is_ready = QtWidgets.QLabel(self.centralwidget)
        self.is_ready.setGeometry(QtCore.QRect(1810, 190, 60, 16))
        self.is_ready.setObjectName("is_ready")
        # self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget = MatplotlibWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(30, 560, 1651, 461))
        self.widget.setObjectName("widget")
        mainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "钢坯头尾定位系统"))
        self.groupBox.setTitle(_translate("mainWindow", "手动辊道控制"))
        self.forwardButton.setText(_translate("mainWindow", "前进"))
        self.backwardButton.setText(_translate("mainWindow", "后退"))
        self.stopButton.setText(_translate("mainWindow", "停止"))
        self.date.setText(_translate("mainWindow", "date"))
        self.head_ori.setText(_translate("mainWindow", "head_ori"))
        self.tail_ori.setText(_translate("mainWindow", "tail_ori"))
        self.enablesystemBox.setText(_translate("mainWindow", "系统控制辊道"))
        self.enablemanulBox.setText(_translate("mainWindow", "手动控制辊道"))
        self.label.setText(_translate("mainWindow", "当前调整次数:"))
        self.adjust_cnt.setText(_translate("mainWindow", "0"))
        self.label_2.setText(_translate("mainWindow", "钢坯到位状态:"))
        self.is_ready.setText(_translate("mainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#fc0107;\">未到位</span></p></body></html>"))



